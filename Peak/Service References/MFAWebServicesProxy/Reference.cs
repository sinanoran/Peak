//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MFAWebServicesProxy {
  using System.Runtime.Serialization;

  /// <summary>
  /// 
  /// </summary>
  [System.Diagnostics.DebuggerStepThroughAttribute()]
  [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
  [System.Runtime.Serialization.DataContractAttribute(Name = "MFAWebServiceResult", Namespace = "http://prjwebservice/")]
  public partial class MFAWebServiceResult : object {

    private string errorMsgField;

    private string sessionIdField;

    private string outputDataXMLField;

    private string errorCodeField;

    /// <summary>
    /// 
    /// </summary>
    [System.Runtime.Serialization.DataMemberAttribute(IsRequired = true)]
    public string errorMsg {
      get {
        return this.errorMsgField;
      }
      set {
        this.errorMsgField = value;
      }
    }

    /// <summary>
    /// 
    /// </summary>
    [System.Runtime.Serialization.DataMemberAttribute(IsRequired = true)]
    public string sessionId {
      get {
        return this.sessionIdField;
      }
      set {
        this.sessionIdField = value;
      }
    }

    /// <summary>
    /// 
    /// </summary>
    [System.Runtime.Serialization.DataMemberAttribute(IsRequired = true, Order = 2)]
    public string outputDataXML {
      get {
        return this.outputDataXMLField;
      }
      set {
        this.outputDataXMLField = value;
      }
    }

    /// <summary>
    /// 
    /// </summary>
    [System.Runtime.Serialization.DataMemberAttribute(IsRequired = true, Order = 3)]
    public string errorCode {
      get {
        return this.errorCodeField;
      }
      set {
        this.errorCodeField = value;
      }
    }
  }

  /// <summary>
  /// 
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
  [System.ServiceModel.ServiceContractAttribute(Namespace = "http://prjwebservice/", ConfigurationName = "MFAWebServicesProxy.MFAWebServices")]
  public interface MFAWebServices {

    /// <summary>
    /// 
    /// </summary>
    /// <param name="UserName"></param>
    /// <param name="Password"></param>
    /// <param name="ServiceID"></param>
    /// <param name="Environment"></param>
    /// <param name="InputDataXML"></param>
    /// <returns></returns>
    [System.ServiceModel.OperationContractAttribute(Action = "", ReplyAction = "*")]
    [return: System.ServiceModel.MessageParameterAttribute(Name = "return")]
    System.Threading.Tasks.Task<MFAWebServicesProxy.MFAWebServiceResult> MFAWebSrvAsync(string UserName, string Password, string ServiceID, string Environment, string InputDataXML);
  }

  /// <summary>
  /// 
  /// </summary>
  [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
  public interface MFAWebServicesChannel : MFAWebServicesProxy.MFAWebServices, System.ServiceModel.IClientChannel {
  }

  /// <summary>
  /// 
  /// </summary>
  [System.Diagnostics.DebuggerStepThroughAttribute()]
  [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "0.4.0.0")]
  public partial class MFAWebServicesClient : System.ServiceModel.ClientBase<MFAWebServicesProxy.MFAWebServices>, MFAWebServicesProxy.MFAWebServices {

    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);

    /// <summary>
    /// 
    /// </summary>
    public MFAWebServicesClient() :
            base(MFAWebServicesClient.GetDefaultBinding(), MFAWebServicesClient.GetDefaultEndpointAddress()) {
      this.Endpoint.Name = EndpointConfiguration.MFAWebServicesSoapHttpPort.ToString();
      ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="endpointConfiguration"></param>
    public MFAWebServicesClient(EndpointConfiguration endpointConfiguration) :
            base(MFAWebServicesClient.GetBindingForEndpoint(endpointConfiguration), MFAWebServicesClient.GetEndpointAddress(endpointConfiguration)) {
      this.Endpoint.Name = endpointConfiguration.ToString();
      ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="endpointConfiguration"></param>
    /// <param name="remoteAddress"></param>
    public MFAWebServicesClient(EndpointConfiguration endpointConfiguration, string remoteAddress) :
            base(MFAWebServicesClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
      this.Endpoint.Name = endpointConfiguration.ToString();
      ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="endpointConfiguration"></param>
    /// <param name="remoteAddress"></param>
    public MFAWebServicesClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) :
            base(MFAWebServicesClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
      this.Endpoint.Name = endpointConfiguration.ToString();
      ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="binding"></param>
    /// <param name="remoteAddress"></param>
    public MFAWebServicesClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress) {
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="UserName"></param>
    /// <param name="Password"></param>
    /// <param name="ServiceID"></param>
    /// <param name="Environment"></param>
    /// <param name="InputDataXML"></param>
    /// <returns></returns>
    public System.Threading.Tasks.Task<MFAWebServicesProxy.MFAWebServiceResult> MFAWebSrvAsync(string UserName, string Password, string ServiceID, string Environment, string InputDataXML) {
      return base.Channel.MFAWebSrvAsync(UserName, Password, ServiceID, Environment, InputDataXML);
    }

    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    public virtual System.Threading.Tasks.Task OpenAsync() {
      return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
    }

    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    public virtual System.Threading.Tasks.Task CloseAsync() {
      return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="endpointConfiguration"></param>
    /// <returns></returns>
    private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
      if ((endpointConfiguration == EndpointConfiguration.MFAWebServicesSoapHttpPort)) {
        System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
        result.MaxBufferSize = int.MaxValue;
        result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
        result.MaxReceivedMessageSize = int.MaxValue;
        result.AllowCookies = true;
        return result;
      }
      throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="endpointConfiguration"></param>
    /// <returns></returns>
    private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
      if ((endpointConfiguration == EndpointConfiguration.MFAWebServicesSoapHttpPort)) {
        return new System.ServiceModel.EndpointAddress("http://mfawls-dt.int.xxx.com.tr/mfaws/MFAWebServices");
      }
      throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
    }

    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
      return MFAWebServicesClient.GetBindingForEndpoint(EndpointConfiguration.MFAWebServicesSoapHttpPort);
    }

    private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
      return MFAWebServicesClient.GetEndpointAddress(EndpointConfiguration.MFAWebServicesSoapHttpPort);
    }

    /// <summary>
    /// 
    /// </summary>
    public enum EndpointConfiguration {
      /// <summary>
      /// 
      /// </summary>
      MFAWebServicesSoapHttpPort,
    }
  }
}
